<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <framework name="qpn"/>
 <package name="HSMs" stereotype="0x02">
  <class name="Clock_Alarm" superclass="qpn::QHsm">
   <attribute name="current_time" type="uint32_t" visibility="0x02" properties="0x01">
    <documentation>Current Time is a static variable for the Class, which means that even if there are multiple instances of the class, this should be same for all the instances.
Reason is simple because we can't have different current_time value for multiple instances, this is something same for all.
NOTE: don't get confuse with static keyword, this static is in relevance to classes.</documentation>
   </attribute>
   <attribute name="temp_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="time_mode" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="obj" type="Clock_Alarm" visibility="0x02" properties="0x01"/>
   <attribute name="temp_format" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="temp_digit" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeout" type="uint8_t" visibility="0x02" properties="0x00"/>
   <operation name="GetCurrentTime" type="uint32_t" visibility="0x00" properties="0x01">
    <documentation>This returns the value of the current_time attribute of the class, which is static with reference to class Clock_Alarm.</documentation>
    <code>uint32_t temp = 0u;
noInterrupts();
temp = Clock_Alarm_current_time;
interrupts();
return (temp);</code>
   </operation>
   <operation name="UpdateCurrentTime" type="void" visibility="0x00" properties="0x01">
    <code>/* this function is called from ISR hence we don't need to disable and enable
interrupts to update this attribute of the class */
Clock_Alarm_current_time++;
/* If maximum value is reached, reset the current time */
if( Clock_Alarm_current_time &gt;= MAX_TIME )
{
  Clock_Alarm_current_time = 0u;
}</code>
   </operation>
   <operation name="SetCurrentTime" type="void" visibility="0x00" properties="0x01">
    <parameter name="new_current_time" type="uint32_t"/>
    <code>/* current_time is also getting updated in interrupts, hence we can't update
it directly, it should be an atomic update */
noInterrupts();
Clock_Alarm_current_time = new_current_time;
interrupts();</code>
   </operation>
   <operation name="DisplayCurrentTime" type="void" visibility="0x00" properties="0x00">
    <documentation>/*
 * Description : Displays current time depending upon the time mode
 * param1: 'me' pointer
 * param2 : row number of the LCD
 * param3: column number of the LCD
 */</documentation>
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;
uint32_t time_;

/* get the current time */
uint32_t time24h = Clock_Alarm_GetCurrentTime();
/* extract sub-second to append later */
uint8_t ss = time24h % 10U;
/* convert to number of seconds */
time24h = Clock_Alarm_GetCurrentTime()/10u;

if( me-&gt;time_mode == TIME_MODE_24H )
{
  /* already in 24 hour format */
  time_ = time24h;
}
else
{
  time_ = Convert24H_To_12H( time24h );
}

/* convert integer time to string in hh:mm:ss format*/
time_as_string = IntegerTime_ToString( time_ );
/* concatenate sub-seconds */
time_as_string.concat('.');
time_as_string.concat( ss );

/* if mode is 12H , concatenate  am/pm information */
if( me-&gt;time_mode == TIME_MODE_12H )
{
  time_as_string.concat(' ');
  time_as_string.concat( GetAM_PM(time24h) );
}
/* update display */
display_write(time_as_string, row, col);</code>
   </operation>
   <operation name="DisplayClockSettingTime" type="void" visibility="0x00" properties="0x00">
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;

/* convert time to hh:mm:ss format */
time_as_string = IntegerTime_ToString( me-&gt;temp_time );

/* concatenate AM/PM information */
if( me-&gt;temp_format != FORMAT_24H )
{
  time_as_string.concat(' ');
  if( me-&gt;temp_format == FORMAT_AM )
  {
    time_as_string.concat(&quot;AM&quot;);
  }
  else
  {
    time_as_string.concat(&quot;PM&quot;);
  }
}
/* update the display */
display_write( time_as_string, row, col);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1/1">
     <action>/* Set the current time at start-up */
Clock_Alarm_SetCurrentTime( INITIAL_CURRENT_TIME );
/* Also set the alarm time at start-up */
me-&gt;alarm_time = INITIAL_ALARM_TIME;
/* Also set the time-mode */
me-&gt;time_mode = TIME_MODE_12H;
/* Also set the alarm status to off at start-up */
me-&gt;alarm_status = ALARM_OFF;</action>
     <initial_glyph conn="4,2,4,3,15,8">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Clock">
     <history type="deep" target="../1">
      <history_glyph conn="8,28,3,2,6,-4"/>
     </history>
     <state name="Ticking">
      <entry>Clock_Alarm_DisplayCurrentTime( me, TICKING_CURR_TIME_ROW, TICKING_CURR_TIME_COL );</entry>
      <exit>/* Clear the display, while exiting this state */
display_clear();</exit>
      <tran trig="SET" target="../../2/2">
       <action>/* get the current time in temp variable */
me-&gt;temp_time = Clock_Alarm_GetCurrentTime()/10u;
/* Check if mode is 24h or 12h */
if( me-&gt;time_mode == TIME_MODE_12H )
{
  /* Check if AM or PM */
  if( GetAM_PM( me-&gt;temp_time).equals(&quot;AM&quot;) )
  {
    me-&gt;temp_format = FORMAT_AM;
  }
  else
  {
    me-&gt;temp_format = FORMAT_PM;
  }
}
else
{
  me-&gt;temp_format = FORMAT_24H;
}</action>
       <tran_glyph conn="30,17,1,3,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../2/3">
       <tran_glyph conn="30,19,1,3,4,52,10">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="TICK">
       <action>Clock_Alarm_DisplayCurrentTime( me, TICKING_CURR_TIME_ROW, TICKING_CURR_TIME_COL );</action>
       <tran_glyph conn="12,22,3,-1,12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="12,14,18,10">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Settings">
      <exit>/* clear the display, when setting state is exited */
display_clear();</exit>
      <tran trig="OK" target="../../1">
       <action>display_cursor_off_blinkoff();</action>
       <tran_glyph conn="38,88,3,2,-16,-64">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ABRT" target="../../1">
       <tran_glyph conn="38,84,3,2,-12,-60">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Clock_Setting">
       <entry>Clock_Alarm_DisplayClockSettingTime( me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
/* turn on the blinking on the cursor */
display_cursor_on_blinkon();</entry>
       <initial target="../6">
        <initial_glyph conn="47,30,5,2,8,-4">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <state name="CS_Hour_D2">
        <entry>display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D2_COL);
/* extract digit-2 of the temp time */
me-&gt;temp_digit = DIGIT2( GET_HOUR(me-&gt;temp_time) );</entry>
        <tran trig="SET">
         <action>/* increment the temp digit */
me-&gt;temp_digit++;
/* Digit-1 value of hour digit can vary between 0, 1 ... 9 */
me-&gt;temp_digit %= 10u;
/* now we have to update this value in temp_time variable*/
/* for this we have to first delete the existing time and then add this digit information*/
me-&gt;temp_time -= DIGIT2( GET_HOUR(me-&gt;temp_time) ) * 3600ul;
me-&gt;temp_time += (me-&gt;temp_digit) * 3600ul;

/* display this updated value on display */
/* NOTE: column information should be original because here we are displaying the complete time */
Clock_Alarm_DisplayClockSettingTime( me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
/* reset the cursor back to the same position */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D2_COL);
</action>
         <tran_glyph conn="70,24,3,-1,11">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../2">
         <tran_glyph conn="84,22,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="70,18,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Min_D1">
        <entry>display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D1_COL);
/* extract digit-1 of the temp time */
me-&gt;temp_digit = DIGIT1( GET_MIN(me-&gt;temp_time) );</entry>
        <tran trig="SET">
         <action>/* increment the temp digit */
me-&gt;temp_digit++;
/* Digit-1 value of minute digit can vary between 0, 1...5 */
me-&gt;temp_digit %= 6u;
/* now we have to update this value in temp_time variable*/
/* for this we have to first delete the existing time and then add this digit information*/
me-&gt;temp_time -= DIGIT1( GET_MIN(me-&gt;temp_time) ) * 10ul * 60ul;
me-&gt;temp_time += (me-&gt;temp_digit * 10ul) * 60ul;

/* display this updated value on display */
/* NOTE: column information should be original because here we are displaying the complete time */
Clock_Alarm_DisplayClockSettingTime( me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
/* reset the cursor back to the same position */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D1_COL);
</action>
         <tran_glyph conn="92,24,3,-1,11">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../3">
         <tran_glyph conn="106,22,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="92,18,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Min_D2">
        <entry>display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D2_COL);
/* extract digit-2 of the temp time */
me-&gt;temp_digit = DIGIT2( GET_MIN(me-&gt;temp_time) );</entry>
        <tran trig="SET">
         <action>/* increment the temp digit */
me-&gt;temp_digit++;
/* Digit-1 value of minute digit can vary between 0, 1...9 */
me-&gt;temp_digit %= 10u;
/* now we have to update this value in temp_time variable*/
/* for this we have to first delete the existing time and then add this digit information*/
me-&gt;temp_time -= DIGIT2( GET_MIN(me-&gt;temp_time) ) * 60ul;
me-&gt;temp_time += (me-&gt;temp_digit) * 60ul;

/* display this updated value on display */
/* NOTE: column information should be original because here we are displaying the complete time */
Clock_Alarm_DisplayClockSettingTime( me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
/* reset the cursor back to the same position */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D2_COL);</action>
         <tran_glyph conn="114,24,3,-1,11">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../4">
         <tran_glyph conn="121,26,2,0,5,-66,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="114,18,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Sec_D1">
        <entry>display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D1_COL);
/* extract digit-1 of the temp time */
me-&gt;temp_digit = DIGIT1( GET_SEC(me-&gt;temp_time) );</entry>
        <tran trig="SET">
         <action>/* increment the temp digit */
me-&gt;temp_digit++;
/* Digit-1 value of second digit can vary between 0, 1...5 */
me-&gt;temp_digit %= 6u;
/* now we have to update this value in temp_time variable*/
/* for this we have to first delete the existing time and then add this digit information*/
me-&gt;temp_time -= DIGIT1( GET_SEC(me-&gt;temp_time) ) * 10ul;
me-&gt;temp_time += (me-&gt;temp_digit * 10ul);

/* display this updated value on display */
/* NOTE: column information should be original because here we are displaying the complete time */
Clock_Alarm_DisplayClockSettingTime( me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
/* reset the cursor back to the same position */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D1_COL);
</action>
         <tran_glyph conn="48,44,3,-1,11">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../5">
         <tran_glyph conn="62,42,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="48,38,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Sec_D2">
        <entry>display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D2_COL);
/* extract digit-2 of the temp time */
me-&gt;temp_digit = DIGIT2( GET_SEC(me-&gt;temp_time) );</entry>
        <tran trig="SET">
         <action>/* increment the temp digit */
me-&gt;temp_digit++;
/* Digit-1 value of minute digit can vary between 0, 1...9 */
me-&gt;temp_digit %= 10u;
/* now we have to update this value in temp_time variable*/
/* for this we have to first delete the existing time and then add this digit information*/
me-&gt;temp_time -= DIGIT2( GET_SEC(me-&gt;temp_time) );
me-&gt;temp_time += (me-&gt;temp_digit);

/* display this updated value on display */
Clock_Alarm_DisplayClockSettingTime( me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D2_COL);
/* reset the cursor back to the same position */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="70,44,3,-1,11">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../7">
         <tran_glyph conn="84,42,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="70,38,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Hour_D1">
        <entry>display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D1_COL);
/* extract digit-1 of the temp time */
me-&gt;temp_digit = DIGIT1( GET_HOUR(me-&gt;temp_time) );</entry>
        <tran trig="SET">
         <action>/* increment the temp digit */
me-&gt;temp_digit++;
/* Digit-1 value of hour digit can vary between 0, 1 and 2 */
me-&gt;temp_digit %= 3u;
/* now we have to update this value in temp_time variable*/
/* for this we have to first delete the existing time and then add this digit information*/
me-&gt;temp_time -= DIGIT1( GET_HOUR(me-&gt;temp_time) ) * 10ul * 3600ul;
me-&gt;temp_time += (me-&gt;temp_digit * 10ul) * 3600ul;

/* display this updated value on display */
Clock_Alarm_DisplayClockSettingTime( me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D1_COL);
/* reset the cursor back to the same position */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D1_COL);
</action>
         <tran_glyph conn="48,24,3,-1,11">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../1">
         <tran_glyph conn="62,22,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="48,18,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Format">
        <entry>String msg[3] = { &quot;24H&quot;, &quot;AM&quot;, &quot;PM&quot; };
/* Set the cursor */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL );
/* update the format on lcd */
display_write( msg[me-&gt;temp_format], CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL );
/* set the cursor again to orignal position */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL );</entry>
        <tran trig="SET">
         <action>String msg;
if( me-&gt;temp_format == FORMAT_24H )
{
  me-&gt;temp_format = FORMAT_AM;
  msg = &quot;AM&quot;;
}
else if( me-&gt;temp_format == FORMAT_AM )
{
  me-&gt;temp_format = FORMAT_PM;
  msg = &quot;PM&quot;;
}
else if( me-&gt;temp_format == FORMAT_PM )
{
  me-&gt;temp_format = FORMAT_24H;
  msg = &quot;24H&quot;;
}
/* update the format on lcd */
display_write( msg, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL );
/* set the cursor again to orignal position */
display_set_cursor( CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL );</action>
         <tran_glyph conn="92,44,3,-1,11">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../8">
          <guard brief="TimeIsCorrect?">IsTime_NotCorrect( me-&gt;temp_time, (time_format_t)me-&gt;temp_format )</guard>
          <choice_glyph conn="114,42,5,3,4">
           <action box="-8,1,12,3"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="106,42,1,-1,8">
          <action box="0,-2,7,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="92,38,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Error">
        <entry>display_cursor_off_blinkoff();</entry>
        <exit>/* Erase the error message */
display_erase_block( CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_COL_END);
me-&gt;timeout = 0u;</exit>
        <initial target="../3">
         <initial_glyph conn="120,47,5,2,4,-4">
          <action box="1,-1,10,2"/>
         </initial_glyph>
        </initial>
        <tran trig="SET" target="../..">
         <action>/* turn on the blinking on the cursor */
display_cursor_on_blinkon();</action>
         <tran_glyph conn="144,32,0,0,-18">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <action brief="OK Ignored"/>
         <tran_glyph conn="152,51,1,-1,-7">
          <action box="-21,-1,13,2"/>
         </tran_glyph>
        </tran>
        <state name="Error_On">
         <entry>display_write( &quot;Error!&quot;, CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL);</entry>
         <tran trig="TICK">
          <action>/* Increment the timeout variable */
me-&gt;timeout++;</action>
          <choice target="../../../4">
           <guard brief="Timeout?">me-&gt;timeout == 10</guard>
           <action>/* reset the timeout counter */
me-&gt;timeout = 0u;</action>
           <choice_glyph conn="135,41,5,3,5">
            <action box="-3,-4,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="130,41,1,-1,5">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="120,36,10,7">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state name="Error_Off">
         <entry>/* Erase the error message */
display_erase_block( CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_COL_END);</entry>
         <tran trig="TICK">
          <action>me-&gt;timeout++;</action>
          <choice target="../../../3">
           <guard brief="Timeout?">me-&gt;timeout == 10</guard>
           <action>/* reset the timeout counter */
me-&gt;timeout = 0u;</action>
           <choice_glyph conn="133,47,5,2,-5,-4">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="145,43,2,-1,4,-12">
           <action box="0,1,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="140,36,10,7">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state_glyph node="118,32,34,22">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="44,14,110,41">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="Alarm_Setting">
       <state_glyph node="44,67,94,22"/>
      </state>
      <state_glyph node="38,8,118,84">
       <exit box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="8,3,150,91"/>
    </state>
    <state name="Notify">
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <tran_glyph conn="54,102,3,3,-50,-74,3">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="54,97,18,11"/>
    </state>
    <state_diagram size="161,141"/>
   </statechart>
  </class>
  <attribute name="super_ClockAlarm" type="QHsm *const" visibility="0x00" properties="0x00">
   <code>= &amp;Clock_Alarm_obj.super;</code>
  </attribute>
  <operation name="Clock_Alarm_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>Constructor for our class Clock_Alarm</documentation>
   <code>QHsm_ctor( &amp;Clock_Alarm_obj.super, Q_STATE_CAST(&amp;Clock_Alarm_initial));</code>
  </operation>
  <directory name="../src">
   <file name="ClockAlarm_SM.cpp" properties="external"/>
   <file name="ClockAlarm_SM.h">
    <text>#ifndef CLOCK_ALARM_H
#define CLOCK_ALARM_H

enum ClockAlarm_Signals
{
  SET_SIG = Q_USER_SIG,    /* Q_USER_SIG marks the beginning of User Signals */
  OK_SIG,
  ABRT_SIG,
  ALARM_SIG,
  TICK_SIG,
  IGNORE_SIG,
  MAX_SIG
};

enum time_mode
{
  TIME_MODE_24H = 0,
  TIME_MODE_12H,
};

enum alarm_status
{
  ALARM_OFF = 0,
  ALARM_ON
};

typedef enum time_format
{
  FORMAT_24H = 0,
  FORMAT_AM,
  FORMAT_PM,
} time_format_t;

#define INITIAL_CURRENT_TIME    (((10ul*3600ul) + (10ul*60ul) + 10ul) * 10ul)    /* 10 hours 10 minutes 10 seconds */
#define INITIAL_ALARM_TIME      (8ul*3600ul)                                     /* 8 hours */
#define MAX_TIME                (864000ul)                                       /* 24*3600*10 */
/* Display Related Macros */
#define TICKING_CURR_TIME_ROW             (0u)
#define TICKING_CURR_TIME_COL             (3u)
#define CLOCK_SETTING_TIME_ROW            (0u)
#define CLOCK_SETTING_TIME_COL            (2u)
#define CLOCK_SETTING_TIME_HOUR_D1_COL    (2u)
#define CLOCK_SETTING_TIME_HOUR_D2_COL    (3u)
#define CLOCK_SETTING_TIME_MIN_D1_COL     (5u)
#define CLOCK_SETTING_TIME_MIN_D2_COL     (6u)
#define CLOCK_SETTING_TIME_SEC_D1_COL     (8u)
#define CLOCK_SETTING_TIME_SEC_D2_COL     (9u)
#define CLOCK_SETTING_TIME_FMT_COL        (11u)

#define CLOCK_SETTING_ERR_MSG_ROW         (2u)
#define CLOCK_SETTING_ERR_MSG_COL         (4u)
#define CLOCK_SETTING_ERR_MSG_COL_END     (9u)

$declare${HSMs::Clock_Alarm_ctor}
$declare${HSMs::super_ClockAlarm}

#endif</text>
   </file>
  </directory>
 </package>
</model>
