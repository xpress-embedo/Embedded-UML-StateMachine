<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <framework name="qpn"/>
 <package name="HSMs" stereotype="0x02">
  <class name="Clock_Alarm" superclass="qpn::QHsm">
   <attribute name="current_time" type="uint32_t" visibility="0x02" properties="0x01">
    <documentation>Current Time is a static variable for the Class, which means that even if there are multiple instances of the class, this should be same for all the instances.
Reason is simple because we can't have different current_time value for multiple instances, this is something same for all.
NOTE: don't get confuse with static keyword, this static is in relevance to classes.</documentation>
   </attribute>
   <attribute name="temp_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="time_mode" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="obj" type="Clock_Alarm" visibility="0x02" properties="0x01"/>
   <operation name="GetCurrentTime" type="uint32_t" visibility="0x00" properties="0x01">
    <documentation>This returns the value of the current_time attribute of the class, which is static with reference to class Clock_Alarm.</documentation>
   </operation>
   <operation name="UpdateCurrentTime" type="void" visibility="0x00" properties="0x01">
    <code>/* this function is called from ISR hence we don't need to disable and enable
interrupts to update this attribute of the class */
Clock_Alarm_current_time++;
/* If maximum value is reached, reset the current time */
if( Clock_Alarm_current_time &gt;= MAX_TIME )
{
  Clock_Alarm_current_time = 0u;
}</code>
   </operation>
   <operation name="SetCurrentTime" type="void" visibility="0x00" properties="0x01">
    <parameter name="new_current_time" type="uint32_t"/>
    <code>/* current_time is also getting updated in interrupts, hence we can't update
it directly, it should be an atomic update */
noInterrupts();
Clock_Alarm_current_time = new_current_time;
interrupts();</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1/1">
     <action>/* Set the current time at start-up */
Clock_Alarm_SetCurrentTime( INITIAL_CURRENT_TIME );
/* Also set the alarm time at start-up */
me-&gt;alarm_time = INITIAL_ALARM_TIME;
/* Also set the time-mode */
me-&gt;time_mode = TIME_MODE_12H;
/* Also set the alarm status to off at start-up */
me-&gt;alarm_status = ALARM_OFF;</action>
     <initial_glyph conn="4,2,4,3,15,8">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Clock">
     <history type="deep" target="../1">
      <history_glyph conn="8,28,3,2,6,-4"/>
     </history>
     <state name="Ticking">
      <tran trig="SET" target="../../2/2">
       <tran_glyph conn="30,17,1,3,19">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../2/3">
       <tran_glyph conn="30,19,1,3,5,17,14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="12,14,18,10"/>
     </state>
     <state name="Settings">
      <tran trig="OK" target="../../1">
       <tran_glyph conn="40,44,3,2,-18,-20">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ABRT" target="../../1">
       <tran_glyph conn="40,39,3,2,-14,-15">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Clock_Setting">
       <state_glyph node="49,14,18,10"/>
      </state>
      <state name="Alarm_Setting">
       <state_glyph node="49,32,18,10"/>
      </state>
      <state_glyph node="40,8,36,38"/>
     </state>
     <state_glyph node="8,3,74,47"/>
    </state>
    <state name="Alarm_Notify">
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <tran_glyph conn="48,62,3,3,-44,-34,3">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="48,57,18,11"/>
    </state>
    <state_diagram size="93,69"/>
   </statechart>
  </class>
  <operation name="Clock_Alarm_ctor" type="void" visibility="0x00" properties="0x00">
   <documentation>Constructor for our class Clock_Alarm</documentation>
   <code>QHsm_ctor( &amp;Clock_Alarm_obj.super, Q_STATE_CAST(Clock_Alarm_Ticking));</code>
  </operation>
  <directory name="../src">
   <file name="ClockAlarm_SM.cpp">
    <text>#include &lt;Arduino.h&gt;
#include &quot;qpn.h&quot;
#include &quot;lcd.h&quot;
#include &quot;ClockAlarm_SM.h&quot;

$declare${HSMs::Clock_Alarm}

$define${HSMs::Clock_Alarm_ctor}

$define${HSMs::Clock_Alarm}


ISR( TIMER1_COMPA_vect )
{
  Clock_Alarm_UpdateCurrentTime();
}
</text>
   </file>
   <file name="ClockAlarm_SM.h">
    <text>#ifndef CLOCK_ALARM_H
#define CLOCK_ALARM_H

enum ClockAlarm_Signals
{
  SET_SIG = Q_USER_SIG,    /* Q_USER_SIG marks the beginning of User Signals */
  OK_SIG,
  ABRT_SIG,
  ALARM_SIG,
  TICK_SIG,
  MAX_SIG
};

enum time_mode
{
  TIME_MODE_24H = 0,
  TIME_MODE_12H,
};

enum alarm_status
{
  ALARM_OFF = 0,
  ALARM_ON
};

#define INITIAL_CURRENT_TIME    (((10ul*3600ul) + (10ul*60ul) + 10ul) * 10ul)    /* 10 hours 10 minutes 10 seconds */
#define INITIAL_ALARM_TIME      (8ul*3600ul)                                     /* 8 hours */
#define MAX_TIME                (864000ul)                                       /* 24*3600*10 */

$declare${HSMs::Clock_Alarm_ctor}

#endif</text>
   </file>
  </directory>
 </package>
</model>
