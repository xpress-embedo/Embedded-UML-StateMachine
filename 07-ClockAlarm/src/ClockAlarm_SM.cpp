/*.$file${HSMs::../src::ClockAlarm_SM.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: ClockAlarm.qm
* File:  ${HSMs::../src::ClockAlarm_SM.cpp}
*
* This code has been generated by QM 5.1.1 <www.state-machine.com/qm/>.
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*.$endhead${HSMs::../src::ClockAlarm_SM.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#include <Arduino.h>
#include "qpn.h"
#include "lcd.h"
#include "ClockAlarm_SM.h"

/*.$declare${HSMs::Clock_Alarm} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${HSMs::Clock_Alarm} ....................................................*/
typedef struct Clock_Alarm {
/* protected: */
    QHsm super;

/* private: */
    uint32_t current_time;
    uint32_t temp_time;
    uint32_t alarm_time;
    uint8_t alarm_status;
    uint8_t time_mode;

/* private state histories */
    QStateHandler hist_Clock;
} Clock_Alarm;
extern Clock_Alarm Clock_Alarm_obj;

/* protected: */
static QState Clock_Alarm_initial(Clock_Alarm * const me);
static QState Clock_Alarm_Clock(Clock_Alarm * const me);
static QState Clock_Alarm_Ticking(Clock_Alarm * const me);
static QState Clock_Alarm_Settings(Clock_Alarm * const me);
static QState Clock_Alarm_Clock_Setting(Clock_Alarm * const me);
static QState Clock_Alarm_Alarm_Setting(Clock_Alarm * const me);
static QState Clock_Alarm_Alarm_Notify(Clock_Alarm * const me);
/*.$enddecl${HSMs::Clock_Alarm} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

/*.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*. Check for the minimum required QP version */
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpn version 6.9.0 or higher required
#endif
/*.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
/*.$define${HSMs::Clock_Alarm} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${HSMs::Clock_Alarm} ....................................................*/
Clock_Alarm Clock_Alarm_obj;
/*.${HSMs::Clock_Alarm::SM} ................................................*/
static QState Clock_Alarm_initial(Clock_Alarm * const me) {
    /*.${HSMs::Clock_Alarm::SM::initial} */
    /* state history attributes */
    /* state history attributes */
    me->hist_Clock = Q_STATE_CAST(&Clock_Alarm_Ticking);
    return Q_TRAN(&Clock_Alarm_Ticking);
}
/*.${HSMs::Clock_Alarm::SM::Clock} .........................................*/
static QState Clock_Alarm_Clock(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${HSMs::Clock_Alarm::SM::Clock} */
        case Q_EXIT_SIG: {
            /* save deep history */
            me->hist_Clock = QHsm_state(me);
            status_ = Q_HANDLED();
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.${HSMs::Clock_Alarm::SM::Clock::Ticking} ................................*/
static QState Clock_Alarm_Ticking(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${HSMs::Clock_Alarm::SM::Clock::Ticking::SET} */
        case SET_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Clock_Setting);
            break;
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Ticking::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Alarm_Setting);
            break;
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock);
            break;
        }
    }
    return status_;
}
/*.${HSMs::Clock_Alarm::SM::Clock::Settings} ...............................*/
static QState Clock_Alarm_Settings(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::OK} */
        case OK_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Ticking);
            break;
        }
        /*.${HSMs::Clock_Alarm::SM::Clock::Settings::ABRT} */
        case ABRT_SIG: {
            status_ = Q_TRAN(&Clock_Alarm_Ticking);
            break;
        }
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Clock);
            break;
        }
    }
    return status_;
}
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Clock_Setting} ................*/
static QState Clock_Alarm_Clock_Setting(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Settings);
            break;
        }
    }
    return status_;
}
/*.${HSMs::Clock_Alarm::SM::Clock::Settings::Alarm_Setting} ................*/
static QState Clock_Alarm_Alarm_Setting(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        default: {
            status_ = Q_SUPER(&Clock_Alarm_Settings);
            break;
        }
    }
    return status_;
}
/*.${HSMs::Clock_Alarm::SM::Alarm_Notify} ..................................*/
static QState Clock_Alarm_Alarm_Notify(Clock_Alarm * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*.${HSMs::Clock_Alarm::SM::Alarm_Notify::TRIG1} */
        case TRIG1_SIG: {
            status_ = Q_TRAN_HIST(me->hist_Clock);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*.$enddef${HSMs::Clock_Alarm} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
